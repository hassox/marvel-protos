package marvel.cable.public;

import "fender/v1.proto";
import "fender/v1/field_options.proto";

message CharacterDataWrapper {
  /**  The HTTP status code of the returned result. */
  optional int32 code = 1;

  /**  A string description of the call status. */
  optional string status = 2;

  /**  The copyright notice for the returned result. */
  optional string copyright = 3;

  /**  
   * The attribution notice for this result.
   * Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.
   */
  optional string attributionText = 4;

  /**
    * An HTML representation of the attribution notice for this result.
    * Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.
    */
  optional string attributionHTML = 5;

  /**  The results returned by the call. */
  optional CharacterDataContainer data = 6;

  /**  A digest value of the content returned by the call */
  optional string etag = 7;
}

message CharacterDataContainer {
  /** The requested offset (number of skipped results) of the call. */
  optional int32 offset = 1;
  /** The requested result limit. */
  optional int32 limit = 2;
  /** The total number of resources available given the current filter set. */
  optional int32 total = 3;
  /** The total number of results returned by this call. */
  optional int32 count = 4;
  /** The list of characters returned by the call. */
  repeated Character results = 5;
}

message Character {
  /** The unique ID of the character resource. */
  optional int32 id = 1;
  /** The name of the character. */
  optional string name = 2;
  /** A short bio or description of the character. */
  optional string description = 3;
  /** The date the resource was most recently modified. */
  optional string modified = 4; // date
  /** The canonical URL identifier for this resource. */
  optional string resourceURI = 5;
  /** A set of public web site URLs for the resource. */
  repeated Url urls = 6;
  /** The representative image for this character. */
  optional Image thumbnail = 7;
  /** A resource list containing comics which feature this character. */
  optional ComicList comics = 8;
  /** A resource list of stories in which this character appears. */
  optional StoryList stories = 9;
  /** A resource list of events in which this character appears. */
  optional EventList events = 10;
  /** A resource list of series in which this character appears */
  optional SeriesList series = 11;
}

message CharacterList {
  /**  The number of total available characters in this list. Will always be greater than or equal to the "returned" value. */
  optional int32 available = 1;

  /**  The number of characters returned in this collection (up to 20). */
  optional int32 returned = 2;

  /**  The path to the full list of characters in this collection. */
  optional string collectionURI = 3;

  /**  The list of returned characters in this collection. */
  repeated CharacterSummary items = 4;
}

message CharacterSummary {
  /**  The path to the individual character resource. */
  optional string resourceURI = 1;
  /**  The full name of the character. */
  optional string name = 2;
  /**  The role of the creator in the parent entity */
  optional string role = 3;
}

enum FormatType {
  comic = 1;
  collection = 2;
}

enum DateDescriptor {
  lastWeek = 1;
  thisWeek = 2;
  nextWeek = 3;
  thisMonth = 4;
}

message ComicDataWrapper {
  /**  The HTTP status code of the returned result. */
  optional int32 code = 1;

  /**  A string description of the call status. */
  optional string status = 2;

  /**  The copyright notice for the returned result. */
  optional string copyright = 3;

  /**
   * The attribution notice for this result. 
   * Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. 
   */
  optional string attributionText = 4;

  /** 
   * An HTML representation of the attribution notice for this result. 
   * Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. 
   */
  optional string attributionHTML = 5;

  /**  The results returned by the call. */
  optional ComicDataContainer data = 6;

  /**  A digest value of the content returned by the call */
  optional string etag = 7;
}

message ComicDataContainer {
  /**  The requested offset (number of skipped results) of the call. */
  optional int32 offset  = 1;

  /**  The requested result limit. */
  optional int32 limit = 2;

  /**  The total number of resources available given the current filter set. */
  optional int32 total = 3;

  /**  The total number of results returned by this call. */
  optional int32 count = 4;

  /** The list of comics returned by the call. */
  repeated Comic results = 5;
}

message Comic {
  /**  The unique ID of the comic resource. */
  optional int32 id = 1;

  /**  The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally. */
  optional int32 digitalId = 2;

  /**  The canonical title of the comic. */
  optional string title = 3;

  /**  The number of the issue in the series (will generally be 0 for collection formats). */
  optional double issueNumber = 4;

  /**  If the issue is a variant (e.g. an alternate cover, second printing, or directorâ€™s cut), a text description of the variant. */
  optional string variantDescription = 5;

  /**  The preferred description of the comic. */
  optional string description = 6;

  /**  The date the resource was most recently modified. */
  optional string modified = 7; // date

  /**  The ISBN for the comic (generally only populated for collection formats). */
  optional string isbn = 8;

  /**  The UPC barcode number for the comic (generally only populated for periodical formats). */
  optional string upc = 9;

  /**  The Diamond code for the comic. */
  optional string diamondCode = 10;

  /**  The EAN barcode for the comic. */
  optional string ean = 11;

  /**  The ISSN barcode for the comic. */
  optional string issn = 12;

  /**  The publication format of the comic e.g. comic, hardcover, trade paperback. */
  optional string format = 13;

  /**  The number of story pages in the comic. */
  optional int32 pageCount = 14;

  /**  A set of descriptive text blurbs for the comic. */
  repeated TextObject textObjects = 15;

  /**  The canonical URL identifier for this resource. */
  optional string resourceURI = 16;

  /**  A set of public web site URLs for the resource. */
  repeated Url urls = 17;

  /**  A summary representation of the series to which this comic belongs. */
  optional SeriesSummary series = 18;

  /**  A list of variant issues for this comic (includes the "original" issue if the current issue is a variant). */
  optional ComicSummary variants = 19;

  /**  A list of collections which include this comic (will generally be empty if the comic's format is a collection). */
  optional ComicSummary collections = 20;

  /**  A list of issues collected in this comic (will generally be empty for periodical formats such as "comic" or "magazine"). */
  repeated ComicSummary collectedIssues = 21;

  /** A list of key dates for this comic. */
  repeated ComicDate dates = 22;

  /** A list of prices for this comic. */
  repeated ComicPrice prices = 23;

  /**  The representative image for this comic. */
  optional Image thumbnail = 24;

  /**  A list of promotional images associated with this comic. */
  repeated Image images = 25;

  /**  A resource list containing the creators associated with this comic. */
  optional CreatorList creators = 26;

  /**  A resource list containing the characters which appear in this comic. */
  optional CharacterList characters = 27;

  /**  A resource list containing the stories which appear in this comic. */
  optional StoryList stories = 28;

  /**  A resource list containing the events in which this comic appears */
  optional EventList events = 29;
}

message ComicDate {
  /**  A description of the date (e.g. onsale date, FOC date). */
  optional string type = 1;
  /**  The date */
  optional string date = 2; // date
}

message ComicPrice {
/**  A description of the price (e.g. print price, digital price). */
  optional string type = 1;
  /**  The price (all prices in USD) */
  optional float price = 2;
}

message ComicList {
  /**  The number of total available issues in this list. Will always be greater than or equal to the "returned" value. */
  optional int32 available = 1;

  /**  The number of issues returned in this collection (up to 20). */
  optional int32 returned = 2;

  /**  The path to the full list of issues in this collection. */
  optional string collectionURI = 3;

  /**  The list of returned issues in this collection. */
  repeated ComicSummary items = 4;
}

message ComicSummary {
  /**  The path to the individual comic resource. */
  optional string resourceURI = 1;

  /** The canonical name of the comic. */
  optional string name = 2;
}

message Url {
  /** A test identifier for the URL */
  optional string type = 1;

  /** A full URL (including scheme, domain, and path). */
  optional string url = 2;
}

message Image {
  /** The directory path of to the image. */
  optional string path = 1;

  /** The file extension for the image. */
  optional string extension = 2;
}

message TextObject {
  /**  The canonical type of the text object (e.g. solicit text, preview text, etc.). */
  optional string type = 1;
  /**  The IETF language tag denoting the language the text object is written in. */
  optional string language = 2;
  /**  The text */
  optional string text = 3;
}

message CreatorDataWrapper {
  /**  The HTTP status code of the returned result. */
  optional int32 code = 1;

  /**  A string description of the call status. */
  optional string status = 2;

  /**  The copyright notice for the returned result. */
  optional string copyright = 3;

  /** 
   * The attribution notice for this result. 
   * Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. 
   */
  optional string attributionText = 4;

  /**
   * An HTML representation of the attribution notice for this result. 
   * Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. 
   */
  optional string attributionHTML = 5;

  /**  The results returned by the call. */
  optional CreatorDataContainer data = 6;

  /**  A digest value of the content returned by the call */
  optional string etag = 7;
}

message CreatorDataContainer {
  /**  The requested offset (number of skipped results) of the call. */
  optional int32 offset = 1;

  /**  The requested result limit. */
  optional int32 limit = 2;

  /**  The total number of resources available given the current filter set. */
  optional int32 total = 3;

  /**  The total number of results returned by this call. */
  optional int32 count = 4;

  /** The list of creators returned by the call */
  repeated Creator results = 5;
}

message Creator {
/**  The unique ID of the creator resource. */
  optional int32 id = 1;

  /**  The first name of the creator. */
  optional string firstName = 2;

  /**  The middle name of the creator. */
  optional string middleName = 3;

  /**  The last name of the creator. */
  optional string lastName = 4;

  /**  The suffix or honorific for the creator. */
  optional string suffix = 5;

  /**  The full name of the creator (a space-separated concatenation of the above four fields). */
  optional string fullName = 6;

  /**  The date the resource was most recently modified. */
  optional string modified = 7; // date

  /**  The canonical URL identifier for this resource. */
  optional string resourceURI = 8;

  /**  A set of public web site URLs for the resource. */
  repeated Url urls = 9;

  /**  The representative image for this creator. */
  optional Image thumbnail = 10;

  /**  A resource list containing the series which feature work by this creator. */
  optional SeriesList series = 11;

  /**  A resource list containing the stories which feature work by this creator. */
  optional StoryList stories = 12;

  /**  A resource list containing the comics which feature work by this creator. */
  optional ComicList comics = 13;

  /**  A resource list containing the events which feature work by this creator */
  optional EventList events = 14;
}

message CreatorList {
  /**  The number of total available creators in this list. Will always be greater than or equal to the "returned" value. */
  optional int32 available = 1;

  /**  The number of creators returned in this collection (up to 20). */
  optional int32 returned = 2;

  /**  The path to the full list of creators in this collection. */
  optional string collectionURI = 3;

  /**  The list of returned creators in this collection. */
  repeated CreatorSummary items = 4;
}

message CreatorSummary {
  /**  The path to the individual creator resource. */
  optional string resourceURI = 1;
  /**  The full name of the creator. */
  optional string name = 2;
  /**  The role of the creator in the parent entity */
  optional string role = 3;
}

message EventDataWrapper {
  /**  The HTTP status code of the returned result. */
  optional int32 code = 1;

  /**  A string description of the call status. */
  optional string status = 2;

  /**  The copyright notice for the returned result. */
  optional string copyright = 3;

  /**
   * The attribution notice for this result. 
   * Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. 
   */
  optional string attributionText = 4;

  /** 
   * An HTML representation of the attribution notice for this result.
   * Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. 
   */
  optional string attributionHTML = 5;

  /**  The results returned by the call. */
  optional EventDataContainer data = 6;

  /**  A digest value of the content returned by the call */
  optional string etag = 7;
}

message EventDataContainer {
  /**  The requested offset (number of skipped results) of the call. */
  optional int32 offset = 1;

  /**  The requested result limit. */
  optional int32 limit = 2;

  /**  The total number of resources available given the current filter set. */
  optional int32 total = 3;

  /**  The total number of results returned by this call. */
  optional int32 count = 4;

  /**  The list of events returned by the cal */
  repeated Event results = 5;
}

message Event {
/**  The unique ID of the event resource. */
  optional int32 id = 1;

  /**  The title of the event. */
  optional string title = 2;

  /**  A description of the event. */
  optional string description = 3;

  /**  The canonical URL identifier for this resource. */
  optional string resourceURI = 4;

  /**  A set of public web site URLs for the event. */
  repeated Url  urls = 5;

  /**  The date the resource was most recently modified. */
  optional string modified = 6; // date

  /**  The date of publication of the first issue in this event. */
  optional string start = 7; // date

  /**  The date of publication of the last issue in this event. */
  optional string end = 8; // date

  /**  The representative image for this event. */
  optional Image thumbnail = 9;

  /**  A resource list containing the comics in this event. */
  optional ComicList comics = 10;

  /**  A resource list containing the stories in this event. */
  optional StoryList stories = 11;

  /**  A resource list containing the series in this event. */
  optional SeriesList series = 12;

  /**  A resource list containing the characters which appear in this event. */
  optional CharacterList characters = 13;

  /**  A resource list containing creators whose work appears in this event. */
  optional CreatorList creators = 14;

  /**  A summary representation of the event which follows this event. */
  optional EventSummary next = 15;

  /**  A summary representation of the event which preceded this event */
  optional EventSummary previous = 16;
}

message EventList {
  /**  The number of total available events in this list. Will always be greater than or equal to the "returned" value. */
  optional int32 available = 1;

  /**  The number of events returned in this collection (up to 20). */
  optional int32 returned = 2;

  /**  The path to the full list of events in this collection. */
  optional string collectionURI = 3;

  /**  The list of returned events in this collection. */
  repeated EventSummary items = 4;
}
message EventSummary {
  /**  The path to the individual event resource. */
  optional string resourceURI = 1;

  /**  The name of the event */
  optional string name = 2;
}

message SeriesDataWrapper {
  /**  The HTTP status code of the returned result. */
  optional int32 code = 1;

  /**  A string description of the call status. */
  optional string status = 2;

  /**  The copyright notice for the returned result. */
  optional string copyright = 3;

  /**
   * The attribution notice for this result. 
   * Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.
   */
  optional string attributionText = 4;

  /**
   * An HTML representation of the attribution notice for this result.
   * Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. 
   */
  optional string attributionHTML = 5;

  /** The results returned by the call. */
  optional SeriesDataContainer data = 6;

  /**  A digest value of the content returned by the call */
  optional string etag = 7;
}

message SeriesDataContainer {
/**  The requested offset (number of skipped results) of the call. */
  optional int32 offset = 1;

  /**  The requested result limit. */
  optional int32 limit = 2;

  /**  The total number of resources available given the current filter set. */
  optional int32 total = 3;

  /**  The total number of results returned by this call. */
  optional int32 count = 4;

  /**  The list of series returned by the call */
  repeated Series results = 5;
}

message Series {
  /**  The unique ID of the series resource. */
  optional int32 id = 1;

  /**  The canonical title of the series. */
  optional string title = 2;

  /**  A description of the series. */
  optional string description = 3;

  /**  The canonical URL identifier for this resource. */
  optional string resourceURI = 4;

  /**  A set of public web site URLs for the resource. */
  repeated Url urls = 5;

  /**  The first year of publication for the series. */
  optional uint32 startYear = 6;

  /**  The last year of publication for the series (conventionally, 2099 for ongoing series) . */
  optional uint32 endYear = 7;

  /**  The age-appropriateness rating for the series. */
  optional string rating = 8;

  /**  The date the resource was most recently modified. */
  optional string modified = 9; //date

  /**  The representative image for this series. */
  optional Image thumbnail = 10;

  /**  A resource list containing comics in this series. */
  optional ComicList comics = 11;

  /**  A resource list containing stories which occur in comics in this series. */
  optional StoryList stories = 12;

  /**  A resource list containing events which take place in comics in this series. */
  optional EventList events = 13;

  /**  A resource list containing characters which appear in comics in this series. */
  optional CharacterList characters = 14;

  /**  A resource list of creators whose work appears in comics in this series. */
  optional CreatorList creators = 15;

  /**  A summary representation of the series which follows this series. */
  optional SeriesSummary next = 16;

  /**  A summary representation of the series which preceded this series */
  optional SeriesSummary previous = 17;
}

message SeriesList {
  /** The number of total available series in this list. Will always be greater than or equal to the "returned" value. */
  optional int32 available = 1;

  /** The number of series returned in this collection (up to 20). */
  optional int32 returned = 2;

  /** The path to the full list of series in this collection. */
  optional string collectionURI = 3;

  /** The list of returned series in this collection. */
  repeated SeriesSummary items = 4;
}

message SeriesSummary {
  /** The path to the individual series resource. */
  optional string resourceURI = 1;

  /** The canonical name of the series */
  optional string name = 2;
}

message StoryDataWrapper {
  /**  The HTTP status code of the returned result. */
  optional int32 code = 1;

  /**  A string description of the call status. */
  optional string status = 2;

  /**  The copyright notice for the returned result. */
  optional string copyright = 3;

  /**  The attribution notice for this result. Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
  optional string attributionText = 4;

  /** 
   * An HTML representation of the attribution notice for this result. 
   * Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.
   */
  optional string attributionHTML = 5;

  /**  The results returned by the call. */
  optional StoryDataContainer data = 6;

  /**  A digest value of the content returned by the call */
  optional string etag = 7;
}

message StoryDataContainer {
  /**  The requested offset (number of skipped results) of the call. */
  optional int32 offset = 1;

  /**  The requested result limit. */
  optional int32 limit = 2;

  /**  The total number of resources available given the current filter set. */
  optional int32 total = 3;

  /**  The total number of results returned by this call. */
  optional int32 count = 4;

  /**  The list of stories returned by the call. */
  repeated Story results = 5;
}

message Story {
  /**  The unique ID of the story resource. */
  optional int32 id = 1;

  /**  The story title. */
  optional string title = 2;

  /**  A short description of the story. */
  optional string description = 3;

  /**  The canonical URL identifier for this resource.  */
  optional string resourceURI = 4;

  /**  The story type e.g. interior story, cover, text story. */
  optional string type = 5;

  /**  The date the resource was most recently modified. */
  optional string modified = 6; // date`

  /**  The representative image for this story. */
  optional Image thumbnail = 7;

  /**  A resource list containing comics in which this story takes place. */
  optional ComicList comics = 8;

  /**  A resource list containing series in which this story appears. */
  optional SeriesList series = 9;

  /**  A resource list of the events in which this story appears. */
  optional EventList events = 10;

  /**  A resource list of characters which appear in this story. */
  optional CharacterList characters = 11;

  /**  A resource list of creators who worked on this story. */
  optional CreatorList creators = 12;

  /**  A summary representation of the issue in which this story was originally published */
  optional ComicSummary originalissue = 13;
}

message StoryList {
  /**  The number of total available stories in this list. Will always be greater than or equal to the "returned" value. */
  optional int32 available = 1;

  /**  The number of stories returned in this collection (up to 20). */
  optional int32 returned = 2;

  /**  The path to the full list of stories in this collection. */
  optional string collectionURI = 3;

  /** The list of returned stories in this collection. */
  repeated StorySummary items = 4;
}

message StorySummary {
  /**  The path to the individual story resource. */
  optional string resourceURI = 1;

  /**  The canonical name of the story. */
  optional string name = 2;

  /**  The type of the story (interior or cover) */
  optional string type = 3;
}

